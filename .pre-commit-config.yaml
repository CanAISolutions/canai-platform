repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-json
        files: \.cursor\.config\.json$
      - id: check-yaml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=1000']

  - repo: local
    hooks:
      - id: cursor-rules-validation
        name: Validate Cursor Rules Configuration
        entry: bash -c 'echo "üîç Validating Cursor Rules..." && python3 -c "
import json
import os
import sys

# Validate .cursor.config.json exists and is valid
if not os.path.exists(\".cursor.config.json\"):
    print(\"‚ùå .cursor.config.json not found\")
    sys.exit(1)

try:
    with open(\".cursor.config.json\", \"r\") as f:
        config = json.load(f)
    print(\"‚úÖ Cursor config is valid JSON\")
except json.JSONDecodeError as e:
    print(f\"‚ùå Invalid JSON: {e}\")
    sys.exit(1)

# Check that required rules are configured
required_rules = [
    \"canai-typescript-rules\",
    \"canai-structure-rules\", 
    \"canai-cortex-rules\",
    \"canai-api-rules\",
    \"canai-supabase-rules\",
    \"canai-user-journey\",
    \"canai-analytics-rules\",
    \"canai-security-rules\",
    \"canai-testing-rules\"
]

config_str = json.dumps(config)
missing = [r for r in required_rules if r not in config_str]

if missing:
    print(f\"‚ùå Missing rules: {missing}\")
    sys.exit(1)

print(\"‚úÖ Critical cursor rules configured\")
"'
        language: system
        files: \.cursor\.config\.json$
        pass_filenames: false

      - id: typescript-strict-mode
        name: Enforce TypeScript Strict Mode
        entry: bash -c 'echo "üîí Checking TypeScript strict mode..." && 
        for tsconfig in tsconfig.json backend/tsconfig.json frontend/tsconfig.json; do
          if [ -f "$tsconfig" ]; then
            if ! grep -q "\"strict\": true" "$tsconfig"; then
              echo "‚ùå $tsconfig missing strict mode"
              exit 1
            fi
            echo "‚úÖ $tsconfig has strict mode"
          fi
        done'
        language: system
        files: tsconfig\.json$
        pass_filenames: false

      - id: no-any-types
        name: Prevent any Types (CanAI TypeScript Rules)
        entry: bash -c 'echo "üéØ Checking for any types..." && 
        if grep -r ": any" --include="*.ts" --include="*.tsx" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "‚ùå Found any types - violates CanAI TypeScript rules"
          exit 1
        fi
        echo "‚úÖ No any types found"'
        language: system
        files: \.(ts|tsx)$
        pass_filenames: false

      - id: no-console-log
        name: Prevent console.log in Production Code
        entry: bash -c 'echo "üö´ Checking for console.log..." && 
        if grep -r "console\.log" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" . --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=tests --exclude-dir=test; then
          echo "‚ö†Ô∏è  Found console.log statements - use proper logging instead"
          exit 1
        fi
        echo "‚úÖ No console.log statements found"'
        language: system
        files: \.(ts|tsx|js|jsx)$
        pass_filenames: false

      - id: validate-cortex-format
        name: Validate Cortex Milestone Format
        entry: bash -c 'echo "üß† Validating cortex.md format..." && 
        if [ -f ".cursor/rules/cortex.md" ]; then
          # Check for proper milestone format
          if grep -E "^\[.*\].*-.*\[20[0-9]{2}-[0-1][0-9]-[0-3][0-9].*MST\].*-.*\[F[1-9]\].*-.*\[(Complete|In-Progress|Blocked|Planning|Testing)\]" .cursor/rules/cortex.md > /dev/null; then
            echo "‚úÖ Cortex milestones have proper format"
          else
            echo "‚ö†Ô∏è  Some cortex milestones may have incorrect format"
            echo "Expected: [Milestone] - [YYYY-MM-DD HH:MM MST] - [F1-F9] - [Status] - [PRD Section] - [Business Impact] - [Technical Context]"
          fi
        else
          echo "‚ö†Ô∏è  cortex.md not found"
        fi'
        language: system
        files: cortex\.md$
        pass_filenames: false

      - id: security-patterns
        name: Validate Security Patterns
        entry: bash -c 'echo "üîí Checking security patterns..." && 
        # Check for exposed secrets
        if grep -r "api_key\|password.*=" --include="*.ts" --include="*.js" --include="*.tsx" --include="*.jsx" . --exclude-dir=node_modules --exclude-dir=.git | grep -v "process.env" | grep -v ".env"; then
          echo "‚ùå Potential secret exposure found - use environment variables"
          exit 1
        fi
        echo "‚úÖ No exposed secrets detected"'
        language: system
        files: \.(ts|tsx|js|jsx)$
        pass_filenames: false

      - id: prd-alignment-check
        name: Check PRD Alignment Comments
        entry: bash -c 'echo "üìã Checking PRD alignment..." && 
        # Look for PRD section references in new/modified files
        staged_files=$(git diff --cached --name-only --diff-filter=AM | grep -E "\.(ts|tsx|js|jsx)$" || true)
        if [ -n "$staged_files" ]; then
          for file in $staged_files; do
            if [ -f "$file" ]; then
              # Check if file has PRD references or TODO comments about PRD alignment
              if grep -q "PRD\|Section [0-9]" "$file"; then
                echo "‚úÖ $file contains PRD references"
              else
                echo "‚ö†Ô∏è  $file may need PRD alignment comments"
              fi
            fi
          done
        fi
        echo "‚úÖ PRD alignment check complete"'
        language: system
        files: \.(ts|tsx|js|jsx)$
        pass_filenames: false

  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3
        files: \.py$

  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.44.0
    hooks:
      - id: eslint
        files: \.(ts|tsx|js|jsx)$
        args: [--fix, --max-warnings=0]
        additional_dependencies:
          - '@typescript-eslint/eslint-plugin'
          - '@typescript-eslint/parser'
          - 'eslint-plugin-react'
          - 'eslint-plugin-react-hooks'

  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0
    hooks:
      - id: prettier
        files: \.(ts|tsx|js|jsx|json|yaml|yml|md)$
        exclude: \.cursor/rules/.*\.mdc$ 