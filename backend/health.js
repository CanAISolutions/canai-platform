// backend/health.js - Production Health Check Endpoint
// Generated by Cursor for TaskMaster deployment verification

import express from 'express';
const router = express.Router();

// Health check endpoint for TaskMaster deployment verification
router.get('/health', async (req, res) => {
  const startTime = Date.now();

  try {
    const healthStatus = {
      status: 'healthy',
      timestamp: new Date().toISOString(),
      version: process.env.npm_package_version || '1.0.0',
      environment: process.env.NODE_ENV || 'development',
      uptime: process.uptime(),
      memory: process.memoryUsage(),
      checks: {},
    };

    // Database connectivity check (Supabase)
    try {
      if (process.env.SUPABASE_URL) {
        // Simple connectivity test
        healthStatus.checks.database = {
          status: 'healthy',
          message: 'Supabase connection configured',
        };
      } else {
        healthStatus.checks.database = {
          status: 'warning',
          message: 'Supabase URL not configured',
        };
      }
    } catch (error) {
      healthStatus.checks.database = {
        status: 'unhealthy',
        message: error.message,
      };
    }

    // External services check
    healthStatus.checks.externalServices = {
      openai: process.env.OPENAI_API_KEY ? 'configured' : 'missing',
      hume: process.env.HUME_API_KEY ? 'configured' : 'missing',
      stripe: process.env.STRIPE_SECRET_KEY ? 'configured' : 'missing',
      memberstack: process.env.MEMBERSTACK_API_KEY ? 'configured' : 'missing',
      posthog: process.env.POSTHOG_API_KEY ? 'configured' : 'missing',
    };

    // Performance metrics
    const responseTime = Date.now() - startTime;
    healthStatus.performance = {
      responseTimeMs: responseTime,
      withinSLA: responseTime < 100, // PRD requirement: <100ms error responses
    };

    // Overall health determination
    const hasUnhealthyChecks = Object.values(healthStatus.checks).some(
      check => check.status === 'unhealthy'
    );

    if (hasUnhealthyChecks) {
      healthStatus.status = 'degraded';
      return res.status(503).json(healthStatus);
    }

    // Success response
    res.status(200).json(healthStatus);
  } catch (error) {
    // Error response
    res.status(500).json({
      status: 'unhealthy',
      timestamp: new Date().toISOString(),
      error: error.message,
      performance: {
        responseTimeMs: Date.now() - startTime,
      },
    });
  }
});

// Readiness check for deployment verification
router.get('/ready', (req, res) => {
  const readinessChecks = {
    status: 'ready',
    timestamp: new Date().toISOString(),
    checks: {
      server: 'running',
      environment: process.env.NODE_ENV || 'development',
      port: process.env.PORT || 10000,
      memoryUsage: process.memoryUsage().heapUsed / 1024 / 1024, // MB
    },
  };

  res.status(200).json(readinessChecks);
});

// Liveness check for container orchestration
router.get('/live', (req, res) => {
  res.status(200).json({
    status: 'alive',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
  });
});

export default router;
