version: '3.8'

services:
  # CanAI Backend API
  canai-backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - '10000:10000'
    environment:
      - NODE_ENV=development
      - PORT=10000
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/canai_db
    depends_on:
      - redis
      - postgres
    volumes:
      - ./backend:/app/backend
      - /app/node_modules
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:10000/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # CanAI Frontend (Development)
  canai-frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - '5173:5173'
    environment:
      - NODE_ENV=development
      - VITE_BACKEND_URL=http://localhost:10000
    volumes:
      - ./frontend:/app/frontend
      - /app/node_modules
    depends_on:
      - canai-backend

  # PostgreSQL Database (for local development)
  postgres:
    image: postgres:15-alpine
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_DB=canai_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./databases/migrations:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and sessions
  redis:
    image: redis:alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 3

  # MongoDB (if needed for specific features)
  mongo:
    image: mongo:6-jammy
    ports:
      - '27017:27017'
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  redis_data:
  postgres_data:
  mongo_data:
