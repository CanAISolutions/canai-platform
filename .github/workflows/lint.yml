name: Code Quality & Linting

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  eslint:
    name: ESLint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint on frontend
        run: cd frontend && npm run lint

      - name: Run ESLint on backend
        run: cd backend && npm run lint

      - name: Generate ESLint report
        run: |
          cd frontend && npm run lint:report
          cd ../backend && npm run lint:report

      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: eslint-results
          path: |
            frontend/eslint-report.json
            backend/eslint-report.json

  prettier:
    name: Prettier
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Prettier formatting
        run: npm run format:check

      - name: Generate format diff
        if: failure()
        run: |
          npm run format:diff > format-diff.txt
          echo "## Formatting Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`diff" >> $GITHUB_STEP_SUMMARY
          cat format-diff.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  typescript:
    name: TypeScript
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript check - Frontend
        run: cd frontend && npm run typecheck

      - name: TypeScript check - Backend
        run: cd backend && npm run typecheck

      - name: TypeScript strict check
        run: npm run typecheck:strict

  stylelint:
    name: Stylelint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Stylelint
        run: cd frontend && npm run lint:css

      - name: Upload Stylelint results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: stylelint-results
          path: frontend/stylelint-report.json

  markdownlint:
    name: Markdown Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run markdownlint
        run: npm run lint:md

      - name: Check documentation links
        run: npm run lint:md:links

  commitlint:
    name: Commit Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate commit messages
        run: npx commitlint --from HEAD~${{ github.event.pull_request.commits }} --to HEAD --verbose

  quality-summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [eslint, prettier, typescript, stylelint, markdownlint, commitlint]
    if: always()

    steps:
      - name: Quality Summary
        run: |
          echo "## Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "- ESLint: ${{ needs.eslint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Prettier: ${{ needs.prettier.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript: ${{ needs.typescript.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Stylelint: ${{ needs.stylelint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Markdownlint: ${{ needs.markdownlint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Commitlint: ${{ needs.commitlint.result }}" >> $GITHUB_STEP_SUMMARY
