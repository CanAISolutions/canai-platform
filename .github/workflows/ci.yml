name: CanAI Platform CI - TypeScript Development Rules Enforcement
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'
  FORCE_COLOR: 1

jobs:
  # typescript-rules-validation:
  #   TODO: Disabled for MVP focus. Uncomment when ready for full TypeScript rules validation.
  #   name: TypeScript Rules Validation
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: 'npm'
  #     - name: Install root dependencies
  #       run: npm ci
  #     - name: Validate TypeScript Configuration
  #       run: |
  #         echo "üîç Validating TypeScript configurations..."
  #         npx tsc --showConfig --project tsconfig.json
  #         npx tsc --showConfig --project backend/tsconfig.json
  #         npx tsc --showConfig --project frontend/tsconfig.json
  #     - name: Check TypeScript Strict Mode Compliance
  #       run: |
  #         echo "üîí Checking TypeScript strict mode compliance..."
  #         grep -q '"strict": true' tsconfig.json || exit 1
  #         grep -q '"strictNullChecks": true' tsconfig.json || exit 1
  #         grep -q '"noUncheckedIndexedAccess": true' tsconfig.json || exit 1
  #         echo "‚úÖ TypeScript strict mode compliance verified"

  backend:
    name: Backend - CanAI TypeScript Rules
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint with CanAI Rules
        run: |
          echo "üîç Running ESLint with CanAI TypeScript Development Rules..."
          npx eslint . --ext .ts --format=stylish --max-warnings=0
      - name: TypeScript Strict Compilation
        run: |
          echo "üîß Running TypeScript strict compilation..."
          npx tsc --noEmit --strict --exactOptionalPropertyTypes --noUncheckedIndexedAccess
      # - name: Prettier Format Check
      #   run: |
      #     echo "üíÖ Checking Prettier formatting..."
      #     npx prettier --check . --config ../.prettierrc.js
      # - name: Security Audit
      #   run: |
      #     echo "üîí Running security audit..."
      #     npm audit --audit-level=moderate
      # - name: Run Tests with Coverage
      #   run: |
      #     echo "üß™ Running tests with coverage..."
      #     npx vitest run --coverage --reporter=verbose
      # - name: CanAI Performance Metrics Check
      #   run: |
      #     echo "‚ö° Checking for performance anti-patterns..."
      #     # Check for console.log statements (should be warnings)
      #     if grep -r "console\.log" src/ --include="*.ts" --exclude-dir=tests; then
      #       echo "‚ö†Ô∏è  Found console.log statements - should use proper logging"
      #     fi
      #     # Check for any usage (should be errors)
      #     if grep -r ": any" src/ --include="*.ts" --exclude-dir=tests; then
      #       echo "‚ùå Found 'any' types - violates CanAI TypeScript rules"
      #       exit 1
      #     fi
      - name: Install Sentry CLI
        run: npm install -g @sentry/cli
      - name: Upload backend source maps to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: canai-solutions
          SENTRY_PROJECT: node
          SENTRY_URL: https://sentry.io
          RELEASE_VERSION: ${{ github.sha }}
        run: |
          sentry-cli releases new $RELEASE_VERSION
          sentry-cli releases files $RELEASE_VERSION upload-sourcemaps ./dist --rewrite --url-prefix '~/dist'
          sentry-cli releases finalize $RELEASE_VERSION

  frontend:
    name: Frontend - CanAI TypeScript Rules
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint with CanAI Rules
        run: |
          echo "üîç Running ESLint with CanAI TypeScript Development Rules..."
          npx eslint . --ext .ts,.tsx --format=stylish --max-warnings=0
      - name: TypeScript Strict Compilation
        run: |
          echo "üîß Running TypeScript strict compilation..."
          npx tsc --noEmit --strict --exactOptionalPropertyTypes --noUncheckedIndexedAccess
      # - name: Prettier Format Check
      #   run: |
      #     echo "üíÖ Checking Prettier formatting..."
      #     npx prettier --check . --config ../.prettierrc.js
      # - name: Accessibility Check
      #   run: |
      #     echo "‚ôø Running accessibility checks..."
      #     # Add axe-core or similar accessibility testing
      #     echo "Accessibility checks would run here"
      - name: Build with Strict Mode
        run: |
          echo "üèóÔ∏è  Building with strict TypeScript mode..."
          npm run build
      # - name: Bundle Size Analysis
      #   run: |
      #     echo "üì¶ Analyzing bundle size..."
      #     # Check if build artifacts exist and are reasonable size
      #     if [ -d "dist" ]; then
      #       du -sh dist/
      #       # Fail if bundle is too large (adjust threshold as needed)
      #       BUNDLE_SIZE=$(du -s dist/ | cut -f1)
      #       if [ $BUNDLE_SIZE -gt 10000 ]; then
      #         echo "‚ö†Ô∏è  Bundle size is large: ${BUNDLE_SIZE}KB"
      #       fi
      #     fi
      - name: Install Sentry CLI
        run: npm install -g @sentry/cli
      - name: Upload frontend source maps to Sentry
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: canai-solutions
          SENTRY_PROJECT: javascript-react
          SENTRY_URL: https://sentry.io
          RELEASE_VERSION: ${{ github.sha }}
        run: |
          sentry-cli releases new $RELEASE_VERSION
          sentry-cli releases files $RELEASE_VERSION upload-sourcemaps ./dist --rewrite --url-prefix '~/'
          sentry-cli releases finalize $RELEASE_VERSION

  # cursor-rules-validation:
  #   name: Cursor Rules Validation
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Validate Cursor Configuration
  #       run: |
  #         echo "üéØ Validating Cursor configuration..."
  #         if [ -f ".cursor.config.json" ]; then
  #           echo "‚úÖ Cursor config found"
  #           # Validate JSON syntax
  #           cat .cursor.config.json | python -m json.tool > /dev/null
  #           echo "‚úÖ Cursor config is valid JSON"
  #         else
  #           echo "‚ùå Cursor config not found"
  #           exit 1
  #         fi
  #     - name: Check TypeScript Rules Integration
  #       run: |
  #         echo "üîó Checking TypeScript rules integration..."
  #         if grep -q "canai-typescript-rules" .cursor.config.json; then
  #           echo "‚úÖ CanAI TypeScript rules are configured in Cursor"
  #         else
  #           echo "‚ùå CanAI TypeScript rules not found in Cursor config"
  #           exit 1
  #         fi

  supabase-test-db:
    name: Supabase Test DB Reset & Migration
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Supabase CLI
        run: npm install -g supabase
      - name: Reset and migrate Supabase test DB
        env:
          SUPABASE_TEST_PROJECT_ID: ${{ secrets.SUPABASE_TEST_PROJECT_ID }}
          SUPABASE_TEST_DB_URL: ${{ secrets.SUPABASE_TEST_DB_URL }}
        run: |
          supabase db reset --project-id $SUPABASE_TEST_PROJECT_ID --db-url $SUPABASE_TEST_DB_URL --non-interactive

  integration-validation:
    name: Integration Validation
    runs-on: ubuntu-latest
    needs:
      [backend, frontend, supabase-test-db]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Full Project Type Check
        run: |
          echo "üîç Running full project type check..."
          npx tsc --build --verbose
      # - name: Cross-Module Validation
      #   run: |
      #     echo "üîó Validating cross-module compatibility..."
      #     # Check that shared types are properly exported/imported
      #     echo "Cross-module validation complete"
      # - name: CanAI Platform Integration Check
      #   run: |
      #     echo "üöÄ Validating CanAI platform integration..."
      #     # Validate that all required CanAI types are available
      #     echo "Platform integration validated"

  success:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [integration-validation]
    steps:
      - name: Success
        run: |
          echo "üéâ All CanAI TypeScript Development Rules checks passed!"
          echo "‚úÖ Code is ready for deployment"
