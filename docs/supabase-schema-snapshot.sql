-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.
-- Updated by AI agent (2025-06-27) for Task 6: Added emotional_score and score_source to public.comparisons

CREATE TABLE public.audit_logs (
  id bigint NOT NULL DEFAULT nextval('audit_logs_id_seq'::regclass),
  table_name character varying NOT NULL,
  record_id uuid NOT NULL,
  action character varying NOT NULL,
  old_data jsonb,
  new_data jsonb,
  user_id uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id),
  CONSTRAINT audit_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.comparisons (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  prompt_log_id uuid,
  user_id uuid,
  canai_output text NOT NULL,
  generic_output text NOT NULL,
  deliverable_metadata jsonb DEFAULT '{}'::jsonb,
  trust_delta numeric CHECK (trust_delta >= 0::numeric AND trust_delta <= 5::numeric),
  emotional_resonance jsonb DEFAULT '{}'::jsonb,
  preference_indicators jsonb DEFAULT '{}'::jsonb,
  generation_time_ms integer,
  model_versions jsonb DEFAULT '{}'::jsonb,
  file_exports jsonb DEFAULT '{}'::jsonb,
  user_preference text CHECK (user_preference = ANY (ARRAY['canai'::text, 'generic'::text, 'undecided'::text])),
  preference_recorded_at timestamp with time zone,
  revision_count integer DEFAULT 0 CHECK (revision_count >= 0),
  status text DEFAULT 'generated'::text CHECK (status = ANY (ARRAY['generated'::text, 'delivered'::text, 'revised'::text, 'finalized'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  emotional_score jsonb,
  score_source text CHECK (score_source = ANY (ARRAY['hume'::text, 'gpt4o'::text])),
  CONSTRAINT comparisons_pkey PRIMARY KEY (id),
  CONSTRAINT comparisons_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT comparisons_prompt_log_id_fkey FOREIGN KEY (prompt_log_id) REFERENCES public.prompt_logs(id)
);
CREATE TABLE public.error_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  error_message text NOT NULL,
  error_type text NOT NULL CHECK (error_type = ANY (ARRAY['timeout'::text, 'invalid_input'::text, 'stripe_failure'::text, 'low_confidence'::text, 'contradiction'::text, 'nsfw'::text, 'token_limit'::text, 'webhook_failure'::text])),
  stack_trace text,
  action text,
  endpoint text,
  user_agent text,
  ip_address inet,
  support_request boolean DEFAULT false,
  retry_count integer DEFAULT 0 CHECK (retry_count >= 0 AND retry_count <= 3),
  resolved boolean DEFAULT false,
  resolution_notes text,
  feedback_id uuid,
  session_id uuid,
  created_at timestamp with time zone DEFAULT now(),
  resolved_at timestamp with time zone,
  CONSTRAINT error_logs_pkey PRIMARY KEY (id),
  CONSTRAINT error_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT error_logs_feedback_id_fkey FOREIGN KEY (feedback_id) REFERENCES public.feedback_logs(id),
  CONSTRAINT fk_error_logs_session_id FOREIGN KEY (session_id) REFERENCES public.session_logs(id)
);
CREATE TABLE public.feedback_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  prompt_id uuid,
  user_id uuid,
  rating integer NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment text NOT NULL,
  sentiment text CHECK (sentiment = ANY (ARRAY['positive'::text, 'neutral'::text, 'negative'::text])),
  shared_platforms ARRAY,
  feedback_type text DEFAULT 'deliverable'::text CHECK (feedback_type = ANY (ARRAY['deliverable'::text, 'spark'::text, 'general'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_logs_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_logs_prompt_id_fkey FOREIGN KEY (prompt_id) REFERENCES public.prompt_logs(id),
  CONSTRAINT feedback_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.payment_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  amount numeric NOT NULL CHECK (amount > 0::numeric),
  currency character varying NOT NULL,
  payment_method character varying NOT NULL,
  status character varying NOT NULL CHECK (status::text = ANY (ARRAY['pending'::character varying, 'completed'::character varying, 'failed'::character varying, 'refunded'::character varying]::text[])),
  stripe_payment_id character varying NOT NULL UNIQUE,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT payment_logs_pkey PRIMARY KEY (id),
  CONSTRAINT payment_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.pricing (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  plan_name character varying NOT NULL UNIQUE,
  price numeric NOT NULL CHECK (price >= 0::numeric),
  currency character varying NOT NULL DEFAULT 'USD'::character varying,
  features jsonb NOT NULL DEFAULT '[]'::jsonb,
  active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT pricing_pkey PRIMARY KEY (id)
);
CREATE TABLE public.prompt_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  spark_log_id uuid,
  user_id uuid,
  business_description text CHECK (char_length(business_description) >= 10 AND char_length(business_description) <= 1000),
  target_market text,
  revenue_model text,
  competitors text,
  unique_value_proposition text,
  location text,
  funding_goal numeric,
  timeline text,
  team_experience text,
  market_research text,
  risk_mitigation text,
  growth_strategy text,
  completion_percentage numeric DEFAULT 0 CHECK (completion_percentage >= 0::numeric AND completion_percentage <= 100::numeric),
  auto_save_count integer DEFAULT 0,
  total_time_spent_seconds integer DEFAULT 0,
  validation_status text DEFAULT 'draft'::text CHECK (validation_status = ANY (ARRAY['draft'::text, 'validated'::text, 'ready_for_generation'::text])),
  emotional_drivers jsonb DEFAULT '[]'::jsonb,
  context_analysis jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  template_version text,
  CONSTRAINT prompt_logs_pkey PRIMARY KEY (id),
  CONSTRAINT fk_prompt_logs_spark_log_id FOREIGN KEY (spark_log_id) REFERENCES public.spark_logs(id),
  CONSTRAINT prompt_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.prompt_templates (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  template_type text CHECK (template_type = ANY (ARRAY['businessPlan'::text, 'socialMedia'::text, 'websiteAudit'::text])),
  version text NOT NULL,
  content text NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT prompt_templates_pkey PRIMARY KEY (id)
);
CREATE TABLE public.session_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  session_start timestamp with time zone DEFAULT now(),
  session_end timestamp with time zone,
  session_duration_seconds integer,
  actions_count integer DEFAULT 0,
  page_views_count integer DEFAULT 0,
  api_calls_count integer DEFAULT 0,
  interaction_type text CHECK (interaction_type = ANY (ARRAY['page_view'::text, 'button_click'::text, 'form_submit'::text, 'api_call'::text])),
  interaction_details jsonb DEFAULT '{}'::jsonb,
  referral_email text,
  referral_link text,
  referral_code text,
  user_agent text,
  ip_address inet,
  device_type text,
  browser text,
  page_load_time_ms integer,
  api_response_time_ms integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT session_logs_pkey PRIMARY KEY (id),
  CONSTRAINT session_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.share_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  prompt_id uuid,
  platform text NOT NULL CHECK (platform = ANY (ARRAY['instagram'::text, 'facebook'::text, 'twitter'::text, 'linkedin'::text, 'email'::text])),
  share_type text DEFAULT 'deliverable'::text CHECK (share_type = ANY (ARRAY['deliverable'::text, 'spark'::text, 'referral'::text])),
  recipient_email text,
  shared_content_type text,
  success boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT share_logs_pkey PRIMARY KEY (id),
  CONSTRAINT share_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT share_logs_prompt_id_fkey FOREIGN KEY (prompt_id) REFERENCES public.prompt_logs(id)
);
CREATE TABLE public.spark_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  initial_prompt_id uuid,
  user_id uuid,
  generated_sparks jsonb NOT NULL DEFAULT '[]'::jsonb,
  selected_spark jsonb,
  product_track text CHECK (product_track = ANY (ARRAY['business_builder'::text, 'social_email'::text, 'site_audit'::text])),
  generation_metadata jsonb DEFAULT '{}'::jsonb,
  feedback text,
  attempt_count integer DEFAULT 1 CHECK (attempt_count >= 1 AND attempt_count <= 4),
  selection_time_ms integer,
  trust_score numeric CHECK (trust_score >= 0::numeric AND trust_score <= 100::numeric),
  emotional_resonance jsonb DEFAULT '{}'::jsonb,
  status text DEFAULT 'generated'::text CHECK (status = ANY (ARRAY['generated'::text, 'selected'::text, 'expired'::text])),
  expires_at timestamp with time zone DEFAULT (now() + '24:00:00'::interval),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT spark_logs_pkey PRIMARY KEY (id),
  CONSTRAINT spark_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.support_requests (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  subject character varying NOT NULL,
  description text NOT NULL,
  status character varying NOT NULL CHECK (status::text = ANY (ARRAY['open'::character varying, 'in_progress'::character varying, 'resolved'::character varying, 'closed'::character varying]::text[])),
  priority character varying CHECK (priority::text = ANY (ARRAY['low'::character varying, 'medium'::character varying, 'high'::character varying, 'critical'::character varying]::text[])),
  assigned_to uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT support_requests_pkey PRIMARY KEY (id),
  CONSTRAINT support_requests_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT support_requests_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES auth.users(id)
);